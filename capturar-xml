from flask import Flask, request, Response
from lxml import etree
import logging

app = Flask(__name__)

# Configuração do logger
logging.basicConfig(level=logging.DEBUG)

@app.route("/consultar_cep", methods=["POST"])
def consulta_cep():
    try:
        # Verifica se o request contém dados no form
        if not request.form:
            return gerar_erro_xml("Erro: Nenhum dado foi enviado no formulário.")

        # Tenta extrair o XML do request.form
        xml_data = None
        for possible_name in ["TextXML", "textxml", "xmldata", "xml"]:
            if possible_name in request.form:
                xml_data = request.form.get(possible_name)
                logging.debug(f"XML encontrado no campo {possible_name}")
                break

        # Se não encontrou por nome específico, tenta o primeiro campo do form
        if not xml_data and len(request.form) > 0:
            first_key = next(iter(request.form))
            xml_data = request.form.get(first_key)
            logging.debug(f"Usando primeiro campo do form: {first_key}")

        # Verifica se o XML foi encontrado
        if not xml_data:
            return gerar_erro_xml("Erro: Nenhum dado XML foi encontrado no formulário.")

        # Tenta fazer o parse do XML
        try:
            root = etree.fromstring(xml_data.encode("utf-8"))
        except etree.XMLSyntaxError as e:
            logging.error(f"Erro de sintaxe no XML: {str(e)}")
            return gerar_erro_xml(f"Erro de sintaxe no XML: {str(e)}")
        except Exception as e:
            logging.error(f"Erro ao processar o XML: {str(e)}")
            return gerar_erro_xml(f"Erro ao processar o XML: {str(e)}")

        # Log do root do XML
        logging.debug(f"Root do XML: {etree.tostring(root, pretty_print=True).decode('utf-8')}")

        # Retorna uma resposta simples com o root do XML
        return Response(etree.tostring(root, pretty_print=True), content_type="application/xml")

    except Exception as e:
        logging.error(f"Erro interno no servidor: {str(e)}")
        return gerar_erro_xml(f"Erro interno no servidor: {str(e)}")

def gerar_erro_xml(mensagem):
    """Gera um XML de erro com mensagem personalizada."""
    response = etree.Element("Erro")
    etree.SubElement(response, "Mensagem").text = mensagem
    return Response(etree.tostring(response, pretty_print=True), content_type="application/xml")

if __name__ == "__main__":
    app.run(debug=True)
