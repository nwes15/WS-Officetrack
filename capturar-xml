from flask import Flask, request, Response
from lxml import etree
import logging

app = Flask(__name__)

# Configuração do logger
logging.basicConfig(level=logging.DEBUG)

@app.route("/capturar_xml", methods=["POST"])
def capturar_xml():
    try:
        # Log do tipo de conteúdo recebido
        content_type = request.headers.get("Content-Type", "").lower()
        logging.debug(f"Tipo de conteúdo recebido: {content_type}")

        # Tenta extrair o XML de várias fontes possíveis
        xml_data = None
        
        # Tenta do form primeiro (com vários nomes possíveis)
        if request.form:
            for possible_name in ["TextXML", "textxml", "xmldata", "xml"]:
                if possible_name in request.form:
                    xml_data = request.form.get(possible_name)
                    logging.debug(f"XML encontrado no campo {possible_name}")
                    break
            
            # Se não encontrou por nome específico, tenta o primeiro campo do form
            if not xml_data and len(request.form) > 0:
                first_key = next(iter(request.form))
                xml_data = request.form.get(first_key)
                logging.debug(f"Usando primeiro campo do form: {first_key}")
        
        # Se não encontrou no form, tenta do corpo da requisição
        if not xml_data and request.data:
            try:
                xml_data = request.data.decode('utf-8')
                logging.debug("Usando dados brutos do corpo da requisição")
            except Exception as e:
                logging.error(f"Erro ao decodificar request.data: {str(e)}")
                return Response(
                    "<Erro>Erro ao decodificar request.data</Erro>",
                    content_type="application/xml",
                    status=400
                )
        
        # Verifica se o XML foi encontrado
        if not xml_data:
            logging.error("Erro: Nenhum dado XML foi encontrado na requisição.")
            return Response(
                "<Erro>Nenhum dado XML foi encontrado na requisição.</Erro>",
                content_type="application/xml",
                status=400
            )
        
        # Log do XML recebido
        logging.debug(f"XML para processar: {xml_data}")

        # Tenta fazer o parse do XML
        try:
            root = etree.fromstring(xml_data.encode("utf-8"))
        except etree.XMLSyntaxError as e:
            logging.error(f"Erro de sintaxe no XML: {str(e)}")
            return Response(
                f"<Erro>Erro de sintaxe no XML: {str(e)}</Erro>",
                content_type="application/xml",
                status=400
            )
        except Exception as e:
            logging.error(f"Erro ao processar o XML: {str(e)}")
            return Response(
                f"<Erro>Erro ao processar o XML: {str(e)}</Erro>",
                content_type="application/xml",
                status=500
            )

        # Se chegou aqui, o XML foi processado com sucesso
        logging.debug("XML processado com sucesso.")
        return Response(
            "<Sucesso>XML processado com sucesso.</Sucesso>",
            content_type="application/xml",
            status=200
        )

    except Exception as e:
        logging.error(f"Erro interno no servidor: {str(e)}", exc_info=True)
        return Response(
            f"<Erro>Erro interno no servidor: {str(e)}</Erro>",
            content_type="application/xml",
            status=500
        )

if __name__ == "__main__":
    app.run(debug=True, port=5000)
